# meta developer: @yourusername
from .. import loader, utils
from telethon.tl.types import PeerUser
from telethon.errors import UsernameNotOccupiedError

@loader.tds
class GetLinkMod(loader.Module):
    """–í—ã–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É tg://user?id= –ø–æ ID, —é–∑–µ—Ä–Ω–µ–π–º—É –∏–ª–∏ —Ä–µ–ø–ª–∞—é"""
    strings = {"name": "GetLink"}

    async def getlinkcmd(self, message):
        """[—Ä–µ–ø–ª–∞–π / ID / username] ‚Äî –ü–æ–ª—É—á–∏—Ç—å tg:// —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        user = None

        if reply:  # –µ—Å–ª–∏ —Ä–µ–ø–ª–∞–π
            user = await self._client.get_entity(reply.from_id)
        elif args:  # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            try:
                if args.isdigit():
                    user = await self._client.get_entity(int(args))
                else:
                    user = await self._client.get_entity(args)
            except UsernameNotOccupiedError:
                await utils.answer(message, "‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç.")
                return
            except Exception as e:
                await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
                return
        else:
            await utils.answer(message, "‚úçÔ∏è –£–∫–∞–∂–∏ ID, –Ω–∏–∫, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        user_id = getattr(user, "id", None)
        if not user_id:
            await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        link = f"tg://user?id={user_id}"
        output = f"üë§ –ü–†–û–§–ò–õ–¨: [–ü–†–û–§–ò–õ–¨]({link})"

        await utils.answer(message, output)
