# meta developer: @yourusername
from telethon.tl.types import PeerUser
from .. import loader, utils

@loader.tds
class GetLinkMod(loader.Module):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID –∏–ª–∏ —Ä–µ–ø–ª–∞—é"""
    strings = {"name": "GetLink"}

    async def getlinkcmd(self, message):
        """[—Ä–µ–ø–ª–∞–π / ID / username] ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        user = None

        if reply:
            user = await self._client.get_entity(reply.from_id)
        elif args:
            try:
                entity = await self._client.get_entity(args)
                user = entity
            except Exception as e:
                await utils.answer(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                return
        else:
            await utils.answer(message, "üë§ –£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–¥–µ–ª–∞–π —Ä–µ–ø–ª–∞–π")
            return

        if not getattr(user, "id", None):
            await utils.answer(message, "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        user_link = f"tg://user?id={user.id}"
        username_link = (
            f"https://t.me/{user.username}" if user.username else user_link
        )

        output = f"üÜî ID: `{user.id}`\nüîó –°—Å—ã–ª–∫–∞: [{user_link}]({user_link})"
        if user.username:
            output += f"\nüåê –ü–∞–±–ª–∏–∫: [@{user.username}](https://t.me/{user.username})"

        await utils.answer(message, output)
